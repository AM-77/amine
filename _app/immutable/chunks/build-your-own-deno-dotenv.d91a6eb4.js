import{S as cc,i as rc,s as ic,k as o,r as a,a as u,l,m as p,h as n,u as s,c as d,p as i,b as r,E as t,n as il}from"./index.fbbdd111.js";function uc(Mp){let m,N,Ve,ca,qe,ra,ia,an,Te,w,ua,We,da,fa,ee,Qe,ha,va,te,ka,Ea,sn,y,ma,ne,_a,wa,ae,ba,ya,on,K,H,ze,Da,ln,xe,se,Je,Ca,Oa,$e,Pa,pn,Se,Aa,cn,oe,Bp=`<code class="language-undefined">HOST=https://www.example.com
PORT=7700
KEY=J46Sq8r4s5d9</code>`,rn,Le,Ta,un,F,j,Ge,xa,dn,Re,Sa,fn,D,le,La,Xe,Ra,Na,Ka,Ze,Ha,Fa,pe,ja,ce,ge,Ya,Ia,hn,C,Y,et,Ua,tt,Ma,Ba,vn,I,Va,nt,qa,Wa,kn,re,Vp=`<code class="language-typescript"><span class="token keyword">const</span> readFileToStrSync <span class="token operator">=</span> <span class="token punctuation">(</span>filePath<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> bytes <span class="token operator">=</span> Deno<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> fileContent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextDecoder</span><span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> fileContent<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`,En,U,at,Qa,za,st,Ja,mn,Ne,$a,_n,O,ie,Ga,ue,ot,Xa,Za,ga,de,es,fe,lt,ts,ns,as,pt,ss,wn,M,os,ct,ls,ps,bn,B,V,rt,cs,yn,P,rs,it,is,us,ut,ds,fs,Dn,he,qp=`<code class="language-typescript"><span class="token keyword">const</span> <span class="token constant">LINE_BREAK</span><span class="token operator">:</span> RegExp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&#92;r&#92;n?|&#92;n</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> parse <span class="token operator">=</span> <span class="token punctuation">(</span>envContent<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> envList <span class="token operator">=</span> envContent<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token constant">LINE_BREAK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> parsedContent<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> envList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		parsedContent<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>envList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> parsedContent<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`,Cn,Ke,hs,On,q,ve,vs,dt,ks,Es,ms,f,_s,ft,ws,bs,ht,ys,Ds,vt,Cs,Os,kt,Ps,As,Et,Ts,xs,mt,Ss,Ls,_t,Rs,Ns,wt,Ks,Hs,bt,Fs,js,yt,Ys,Is,Pn,W,Us,ke,Dt,Ms,Bs,An,A,Q,Ct,Vs,Ee,Ot,qs,Ws,Tn,T,Qs,Pt,zs,Js,At,$s,Gs,xn,me,Wp=`<code class="language-typescript"><span class="token keyword">const</span> setEnv <span class="token operator">=</span> <span class="token punctuation">(</span>parsedEnv<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parsedEnv<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		Deno<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>parsedEnv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> parsedEnv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`,Sn,_,Xs,Tt,Zs,gs,xt,eo,to,St,no,ao,Ln,_e,so,Lt,oo,Rn,we,Qp=`<code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">dotenv</span> <span class="token operator">=</span> <span class="token punctuation">(</span>envFilePath<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> filePath<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> envFilePath <span class="token operator">||</span> <span class="token string">'.env'</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> fileContent <span class="token operator">=</span> <span class="token function">readFileToStrSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> parsedEnv <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>fileContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">setEnv</span><span class="token punctuation">(</span>parsedEnv<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`,Nn,h,lo,Rt,po,co,Nt,ro,io,Kt,uo,fo,Ht,ho,vo,Ft,ko,Eo,jt,mo,_o,Yt,wo,bo,It,yo,Do,Kn,R,z,Ut,Co,Mt,Oo,Hn,J,Po,Bt,Ao,To,Fn,be,zp='<code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">default</span> dotenv<span class="token punctuation">;</span></code>',jn,$,G,Vt,xo,Yn,x,So,qt,Lo,Ro,Wt,No,Ko,In,ye,Jp=`<code class="language-undefined">PASSWORD=1234567
KEY=12T1S654Ts6sc5fsd4Q6np9dx2A</code>`,Un,E,Ho,Qt,Fo,jo,zt,Yo,Io,Jt,Uo,Mo,$t,Bo,Vo,Mn,De,$p=`<code class="language-typescript"><span class="token keyword">import</span> dotenv <span class="token keyword">from</span> <span class="token string">'./mod.ts'</span><span class="token punctuation">;</span>
<span class="token comment">// or you can use import  if from this URL</span>
<span class="token comment">// import dotenv from "https://raw.githubusercontent.com/AM-77/deno-dotenv/master/mod.ts"</span>
<span class="token function">dotenv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Bn,S,qo,Gt,Wo,Qo,Xt,zo,Jo,Vn,Ce,Gp=`<code class="language-typescript"><span class="token keyword">const</span> env <span class="token operator">=</span> Deno<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token function">toObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'PASSWORD: '</span><span class="token punctuation">,</span> env<span class="token punctuation">.</span><span class="token constant">PASSWORD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'KEY: '</span><span class="token punctuation">,</span> env<span class="token punctuation">.</span><span class="token constant">KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,qn,b,$o,Zt,Go,Xo,gt,Zo,go,en,el,Wn,Oe,Xp=`<code class="language-bash">$ deno run --allow-read --allow-env test.ts
PASSWORD: <span class="token number">1234567</span>
KEY: 12T1S654Ts6sc5fsd4Q6np9dx2A</code>`,Qn,He,tl,zn,X,nl,Pe,al,sl;return{c(){m=o("h1"),N=o("a"),Ve=o("span"),ca=a("What is the "),qe=o("code"),ra=a("node dotenv"),ia=a(" module ?"),an=u(),Te=o("blockquote"),w=o("p"),ua=a("Dotenv is a zero-dependency module that loads environment variables from a "),We=o("code"),da=a(".env"),fa=a(" file into "),ee=o("a"),Qe=o("code"),ha=a("process.env"),va=a(". Storing configuration in the environment separate from code is based on "),te=o("a"),ka=a("The Twelve-Factor App"),Ea=a(" methodology."),sn=u(),y=o("p"),ma=a("for more information: check "),ne=o("a"),_a=a("it’s page on npm"),wa=a(" and "),ae=o("a"),ba=a("it’s repository on github"),ya=a("."),on=u(),K=o("h1"),H=o("a"),ze=o("span"),Da=a("what is a .env file ?"),ln=u(),xe=o("blockquote"),se=o("p"),Je=o("code"),Ca=a(".env"),Oa=a(" is the file that contains the environment variables you want to load to your application, each line of the .env file has this format "),$e=o("code"),Pa=a("KEY=VALUE"),pn=u(),Se=o("p"),Aa=a("example:"),cn=u(),oe=o("pre"),rn=u(),Le=o("p"),Ta=a("that out of the way, let’s get started by defining the steps to create this module:"),un=u(),F=o("h2"),j=o("a"),Ge=o("span"),xa=a("The main steps"),dn=u(),Re=o("p"),Sa=a("These are the main steps to build this module:"),fn=u(),D=o("ol"),le=o("li"),La=a("Read the content from the "),Xe=o("code"),Ra=a(".env"),Na=a("."),Ka=u(),Ze=o("li"),Ha=a("Parse the environment variables from the content."),Fa=u(),pe=o("li"),ja=a("Set environment variables in "),ce=o("a"),ge=o("code"),Ya=a("Deno.env"),Ia=a("."),hn=u(),C=o("h3"),Y=o("a"),et=o("span"),Ua=a("1. Read the content from the "),tt=o("code"),Ma=a(".env"),Ba=a(":"),vn=u(),I=o("p"),Va=a("Let’s start by creating the "),nt=o("code"),qa=a("mod.ts"),Wa=a(" file and add this function to it"),kn=u(),re=o("pre"),En=u(),U=o("p"),at=o("em"),Qa=a("NOTE:"),za=a(" You can name the file however you want, but as a best practice we are going to stick to "),st=o("code"),Ja=a("mod.ts"),mn=u(),Ne=o("p"),$a=a("What does this function do is:"),_n=u(),O=o("ul"),ie=o("li"),Ga=a("Synchronously reads and returns the entire content of a file as an array of bytes. using the "),ue=o("a"),ot=o("code"),Xa=a("Deno.readFileSync(filePath)"),Za=a(" function."),ga=u(),de=o("li"),es=a("Convert the array of bytes to a string using the "),fe=o("a"),lt=o("code"),ts=a('new TextDecoder("utf-8").decode(bytes)'),ns=a(" method."),as=u(),pt=o("li"),ss=a("return the content of the file a string."),wn=u(),M=o("p"),os=a("Now that we have the "),ct=o("code"),ls=a(".env"),ps=a(" file content let’s parse the environment variables in it."),bn=u(),B=o("h3"),V=o("a"),rt=o("span"),cs=a("2. Parse the environment variables:"),yn=u(),P=o("p"),rs=a("To do that let’s add the "),it=o("code"),is=a("parse"),us=a(" function to the "),ut=o("code"),ds=a("mod.ts"),fs=a(" file"),Dn=u(),he=o("pre"),Cn=u(),Ke=o("p"),hs=a("what does this code do is:"),On=u(),q=o("ul"),ve=o("li"),vs=a("The "),dt=o("code"),ks=a("LINE_BREAK"),Es=a(" is a regular expression that matches the line break."),ms=u(),f=o("li"),_s=a("The "),ft=o("code"),ws=a("parse"),bs=a(" function takes the content of the "),ht=o("code"),ys=a(".env"),Ds=a(" file as a parameter of type string ( the string returned from the previous function "),vt=o("code"),Cs=a("readFileStrSync"),Os=a(" ), split the content into separate lines ( because each line contain one environment variable with the structure "),kt=o("code"),Ps=a("KEY=VALUE"),As=a(" ) using the "),Et=o("code"),Ts=a("split"),xs=a(" function with "),mt=o("code"),Ss=a("LINE_BREAK"),Ls=a(" RegExp as a parameter, then loop throw all the lines and retrieve the "),_t=o("code"),Rs=a("KEY"),Ns=a(" and the "),wt=o("code"),Ks=a("VALUE"),Hs=a(" in a form of an array of strings "),bt=o("code"),Fs=a("[KEY, VALUE]"),js=a(" and push it to the two-dimensional array "),yt=o("code"),Ys=a("parsedContent"),Is=a(" which will be returned when the loop is completed."),Pn=u(),W=o("p"),Us=a("Now we have the environment variables in a form of a two-dimensional array, all we have left to do is to set it to the "),ke=o("a"),Dt=o("code"),Ms=a("Deno.env"),Bs=a(" so it will be accessible in all the application."),An=u(),A=o("h3"),Q=o("a"),Ct=o("span"),Vs=a("3. Set the environment variables in "),Ee=o("a"),Ot=o("code"),qs=a("Deno.env"),Ws=a(":"),Tn=u(),T=o("p"),Qs=a("Now, let’s add the "),Pt=o("code"),zs=a("setEnv"),Js=a(" function to the "),At=o("code"),$s=a("mod.ts"),Gs=a(" file"),xn=u(),me=o("pre"),Sn=u(),_=o("p"),Xs=a("This function takes the environment variables in a form of a two-dimensional array ( returned from the "),Tt=o("code"),Zs=a("parse"),gs=a(" function ) and add them to the "),xt=o("code"),eo=a("Deno.env"),to=a(" object with the "),St=o("code"),no=a("Deno.env.set()"),ao=a(" function."),Ln=u(),_e=o("p"),so=a("Now we have all the functions we need created, but they are not doing anything yet, they have to collaborate with each other to provide the functionality we are looking for. So let’s just create a function to do that let’s give a name of "),Lt=o("code"),oo=a("dotenv"),Rn=u(),we=o("pre"),Nn=u(),h=o("p"),lo=a("This function take an optional parameter "),Rt=o("code"),po=a("envFilePath"),co=a(" which is the path to the "),Nt=o("code"),ro=a(".env"),io=a(" file ( if it’s provided the function will use it, if not the function will use ‘.env’ as a path value ), then using this path "),Kt=o("code"),uo=a("filePath"),fo=a(" to read the content of the "),Ht=o("code"),ho=a(".env"),vo=a(" file synchronously using the "),Ft=o("code"),ko=a("readFileToStrSync(filePath)"),Eo=a(", then parse the result using the "),jt=o("code"),mo=a("parse(fileContent)"),_o=a(" function, then uses the parsed result in the "),Yt=o("code"),wo=a("setEnv(parsedEnv)"),bo=a(" function to set the environment variables in the "),It=o("code"),yo=a("Deno.env"),Do=a(" object."),Kn=u(),R=o("h3"),z=o("a"),Ut=o("span"),Co=a("4. Finally "),Mt=o("code"),Oo=a("export"),Hn=u(),J=o("p"),Po=a("Now that we have the functionality create and ready, we need just to export the "),Bt=o("code"),Ao=a("dotenv"),To=a(" function so the users can use it in their apps."),Fn=u(),be=o("pre"),jn=u(),$=o("h1"),G=o("a"),Vt=o("span"),xo=a("Let’s test the module"),Yn=u(),x=o("p"),So=a("First create a "),qt=o("code"),Lo=a(".env"),Ro=a(" file and add some "),Wt=o("code"),No=a("KEY=VALUE"),Ko=a(" pairs, something like:"),In=u(),ye=o("pre"),Un=u(),E=o("p"),Ho=a("Then create a typescript file, call it "),Qt=o("code"),Fo=a("test.ts"),jo=a(" or however you want, import the "),zt=o("code"),Yo=a("dotenv"),Io=a(" function from the "),Jt=o("code"),Uo=a("dotenv"),Mo=a(" module we just created, and execute it, so that the environment variables will be available to use from the "),$t=o("code"),Bo=a("Deno.env"),Vo=a(" object"),Mn=u(),De=o("pre"),Bn=u(),S=o("p"),qo=a("now create a snapshot of the environment variables from the "),Gt=o("code"),Wo=a("Deno.env"),Qo=a(" using the "),Xt=o("code"),zo=a("Deno.env.toObject()"),Jo=a(" function and just use it:"),Vn=u(),Ce=o("pre"),qn=u(),b=o("p"),$o=a("Run your "),Zt=o("code"),Go=a("test.ts"),Xo=a(" using the flags "),gt=o("code"),Zo=a("--allow-read"),go=u(),en=o("code"),el=a("--allow-env"),Wn=u(),Oe=o("pre"),Qn=u(),He=o("p"),tl=a("And that’s all, we are finished. Thank you."),zn=u(),X=o("p"),nl=a("Here is "),Pe=o("a"),al=a("the source code"),sl=a(" (I re-factored it a little bit)."),this.h()},l(e){m=l(e,"H1",{id:!0});var c=p(m);N=l(c,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ul=p(N);Ve=l(ul,"SPAN",{class:!0}),p(Ve).forEach(n),ul.forEach(n),ca=s(c,"What is the "),qe=l(c,"CODE",{});var dl=p(qe);ra=s(dl,"node dotenv"),dl.forEach(n),ia=s(c," module ?"),c.forEach(n),an=d(e),Te=l(e,"BLOCKQUOTE",{});var fl=p(Te);w=l(fl,"P",{});var Z=p(w);ua=s(Z,"Dotenv is a zero-dependency module that loads environment variables from a "),We=l(Z,"CODE",{});var hl=p(We);da=s(hl,".env"),hl.forEach(n),fa=s(Z," file into "),ee=l(Z,"A",{href:!0,rel:!0});var vl=p(ee);Qe=l(vl,"CODE",{});var kl=p(Qe);ha=s(kl,"process.env"),kl.forEach(n),vl.forEach(n),va=s(Z,". Storing configuration in the environment separate from code is based on "),te=l(Z,"A",{href:!0,rel:!0});var El=p(te);ka=s(El,"The Twelve-Factor App"),El.forEach(n),Ea=s(Z," methodology."),Z.forEach(n),fl.forEach(n),sn=d(e),y=l(e,"P",{});var Fe=p(y);ma=s(Fe,"for more information: check "),ne=l(Fe,"A",{href:!0,rel:!0});var ml=p(ne);_a=s(ml,"it’s page on npm"),ml.forEach(n),wa=s(Fe," and "),ae=l(Fe,"A",{href:!0,rel:!0});var _l=p(ae);ba=s(_l,"it’s repository on github"),_l.forEach(n),ya=s(Fe,"."),Fe.forEach(n),on=d(e),K=l(e,"H1",{id:!0});var ol=p(K);H=l(ol,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var wl=p(H);ze=l(wl,"SPAN",{class:!0}),p(ze).forEach(n),wl.forEach(n),Da=s(ol,"what is a .env file ?"),ol.forEach(n),ln=d(e),xe=l(e,"BLOCKQUOTE",{});var bl=p(xe);se=l(bl,"P",{});var Jn=p(se);Je=l(Jn,"CODE",{});var yl=p(Je);Ca=s(yl,".env"),yl.forEach(n),Oa=s(Jn," is the file that contains the environment variables you want to load to your application, each line of the .env file has this format "),$e=l(Jn,"CODE",{});var Dl=p($e);Pa=s(Dl,"KEY=VALUE"),Dl.forEach(n),Jn.forEach(n),bl.forEach(n),pn=d(e),Se=l(e,"P",{});var Cl=p(Se);Aa=s(Cl,"example:"),Cl.forEach(n),cn=d(e),oe=l(e,"PRE",{class:!0});var Zp=p(oe);Zp.forEach(n),rn=d(e),Le=l(e,"P",{});var Ol=p(Le);Ta=s(Ol,"that out of the way, let’s get started by defining the steps to create this module:"),Ol.forEach(n),un=d(e),F=l(e,"H2",{id:!0});var ll=p(F);j=l(ll,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Pl=p(j);Ge=l(Pl,"SPAN",{class:!0}),p(Ge).forEach(n),Pl.forEach(n),xa=s(ll,"The main steps"),ll.forEach(n),dn=d(e),Re=l(e,"P",{});var Al=p(Re);Sa=s(Al,"These are the main steps to build this module:"),Al.forEach(n),fn=d(e),D=l(e,"OL",{});var je=p(D);le=l(je,"LI",{});var $n=p(le);La=s($n,"Read the content from the "),Xe=l($n,"CODE",{});var Tl=p(Xe);Ra=s(Tl,".env"),Tl.forEach(n),Na=s($n,"."),$n.forEach(n),Ka=d(je),Ze=l(je,"LI",{});var xl=p(Ze);Ha=s(xl,"Parse the environment variables from the content."),xl.forEach(n),Fa=d(je),pe=l(je,"LI",{});var Gn=p(pe);ja=s(Gn,"Set environment variables in "),ce=l(Gn,"A",{href:!0,rel:!0});var Sl=p(ce);ge=l(Sl,"CODE",{});var Ll=p(ge);Ya=s(Ll,"Deno.env"),Ll.forEach(n),Sl.forEach(n),Ia=s(Gn,"."),Gn.forEach(n),je.forEach(n),hn=d(e),C=l(e,"H3",{id:!0});var tn=p(C);Y=l(tn,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Rl=p(Y);et=l(Rl,"SPAN",{class:!0}),p(et).forEach(n),Rl.forEach(n),Ua=s(tn,"1. Read the content from the "),tt=l(tn,"CODE",{});var Nl=p(tt);Ma=s(Nl,".env"),Nl.forEach(n),Ba=s(tn,":"),tn.forEach(n),vn=d(e),I=l(e,"P",{});var Xn=p(I);Va=s(Xn,"Let’s start by creating the "),nt=l(Xn,"CODE",{});var Kl=p(nt);qa=s(Kl,"mod.ts"),Kl.forEach(n),Wa=s(Xn," file and add this function to it"),Xn.forEach(n),kn=d(e),re=l(e,"PRE",{class:!0});var gp=p(re);gp.forEach(n),En=d(e),U=l(e,"P",{});var Zn=p(U);at=l(Zn,"EM",{});var Hl=p(at);Qa=s(Hl,"NOTE:"),Hl.forEach(n),za=s(Zn," You can name the file however you want, but as a best practice we are going to stick to "),st=l(Zn,"CODE",{});var Fl=p(st);Ja=s(Fl,"mod.ts"),Fl.forEach(n),Zn.forEach(n),mn=d(e),Ne=l(e,"P",{});var jl=p(Ne);$a=s(jl,"What does this function do is:"),jl.forEach(n),_n=d(e),O=l(e,"UL",{});var Ye=p(O);ie=l(Ye,"LI",{});var gn=p(ie);Ga=s(gn,"Synchronously reads and returns the entire content of a file as an array of bytes. using the "),ue=l(gn,"A",{href:!0,rel:!0});var Yl=p(ue);ot=l(Yl,"CODE",{});var Il=p(ot);Xa=s(Il,"Deno.readFileSync(filePath)"),Il.forEach(n),Yl.forEach(n),Za=s(gn," function."),gn.forEach(n),ga=d(Ye),de=l(Ye,"LI",{});var ea=p(de);es=s(ea,"Convert the array of bytes to a string using the "),fe=l(ea,"A",{href:!0,rel:!0});var Ul=p(fe);lt=l(Ul,"CODE",{});var Ml=p(lt);ts=s(Ml,'new TextDecoder("utf-8").decode(bytes)'),Ml.forEach(n),Ul.forEach(n),ns=s(ea," method."),ea.forEach(n),as=d(Ye),pt=l(Ye,"LI",{});var Bl=p(pt);ss=s(Bl,"return the content of the file a string."),Bl.forEach(n),Ye.forEach(n),wn=d(e),M=l(e,"P",{});var ta=p(M);os=s(ta,"Now that we have the "),ct=l(ta,"CODE",{});var Vl=p(ct);ls=s(Vl,".env"),Vl.forEach(n),ps=s(ta," file content let’s parse the environment variables in it."),ta.forEach(n),bn=d(e),B=l(e,"H3",{id:!0});var pl=p(B);V=l(pl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ql=p(V);rt=l(ql,"SPAN",{class:!0}),p(rt).forEach(n),ql.forEach(n),cs=s(pl,"2. Parse the environment variables:"),pl.forEach(n),yn=d(e),P=l(e,"P",{});var Ie=p(P);rs=s(Ie,"To do that let’s add the "),it=l(Ie,"CODE",{});var Wl=p(it);is=s(Wl,"parse"),Wl.forEach(n),us=s(Ie," function to the "),ut=l(Ie,"CODE",{});var Ql=p(ut);ds=s(Ql,"mod.ts"),Ql.forEach(n),fs=s(Ie," file"),Ie.forEach(n),Dn=d(e),he=l(e,"PRE",{class:!0});var ec=p(he);ec.forEach(n),Cn=d(e),Ke=l(e,"P",{});var zl=p(Ke);hs=s(zl,"what does this code do is:"),zl.forEach(n),On=d(e),q=l(e,"UL",{});var na=p(q);ve=l(na,"LI",{});var aa=p(ve);vs=s(aa,"The "),dt=l(aa,"CODE",{});var Jl=p(dt);ks=s(Jl,"LINE_BREAK"),Jl.forEach(n),Es=s(aa," is a regular expression that matches the line break."),aa.forEach(n),ms=d(na),f=l(na,"LI",{});var v=p(f);_s=s(v,"The "),ft=l(v,"CODE",{});var $l=p(ft);ws=s($l,"parse"),$l.forEach(n),bs=s(v," function takes the content of the "),ht=l(v,"CODE",{});var Gl=p(ht);ys=s(Gl,".env"),Gl.forEach(n),Ds=s(v," file as a parameter of type string ( the string returned from the previous function "),vt=l(v,"CODE",{});var Xl=p(vt);Cs=s(Xl,"readFileStrSync"),Xl.forEach(n),Os=s(v," ), split the content into separate lines ( because each line contain one environment variable with the structure "),kt=l(v,"CODE",{});var Zl=p(kt);Ps=s(Zl,"KEY=VALUE"),Zl.forEach(n),As=s(v," ) using the "),Et=l(v,"CODE",{});var gl=p(Et);Ts=s(gl,"split"),gl.forEach(n),xs=s(v," function with "),mt=l(v,"CODE",{});var ep=p(mt);Ss=s(ep,"LINE_BREAK"),ep.forEach(n),Ls=s(v," RegExp as a parameter, then loop throw all the lines and retrieve the "),_t=l(v,"CODE",{});var tp=p(_t);Rs=s(tp,"KEY"),tp.forEach(n),Ns=s(v," and the "),wt=l(v,"CODE",{});var np=p(wt);Ks=s(np,"VALUE"),np.forEach(n),Hs=s(v," in a form of an array of strings "),bt=l(v,"CODE",{});var ap=p(bt);Fs=s(ap,"[KEY, VALUE]"),ap.forEach(n),js=s(v," and push it to the two-dimensional array "),yt=l(v,"CODE",{});var sp=p(yt);Ys=s(sp,"parsedContent"),sp.forEach(n),Is=s(v," which will be returned when the loop is completed."),v.forEach(n),na.forEach(n),Pn=d(e),W=l(e,"P",{});var sa=p(W);Us=s(sa,"Now we have the environment variables in a form of a two-dimensional array, all we have left to do is to set it to the "),ke=l(sa,"A",{href:!0,rel:!0});var op=p(ke);Dt=l(op,"CODE",{});var lp=p(Dt);Ms=s(lp,"Deno.env"),lp.forEach(n),op.forEach(n),Bs=s(sa," so it will be accessible in all the application."),sa.forEach(n),An=d(e),A=l(e,"H3",{id:!0});var nn=p(A);Q=l(nn,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var pp=p(Q);Ct=l(pp,"SPAN",{class:!0}),p(Ct).forEach(n),pp.forEach(n),Vs=s(nn,"3. Set the environment variables in "),Ee=l(nn,"A",{href:!0,rel:!0});var cp=p(Ee);Ot=l(cp,"CODE",{});var rp=p(Ot);qs=s(rp,"Deno.env"),rp.forEach(n),cp.forEach(n),Ws=s(nn,":"),nn.forEach(n),Tn=d(e),T=l(e,"P",{});var Ue=p(T);Qs=s(Ue,"Now, let’s add the "),Pt=l(Ue,"CODE",{});var ip=p(Pt);zs=s(ip,"setEnv"),ip.forEach(n),Js=s(Ue," function to the "),At=l(Ue,"CODE",{});var up=p(At);$s=s(up,"mod.ts"),up.forEach(n),Gs=s(Ue," file"),Ue.forEach(n),xn=d(e),me=l(e,"PRE",{class:!0});var tc=p(me);tc.forEach(n),Sn=d(e),_=l(e,"P",{});var g=p(_);Xs=s(g,"This function takes the environment variables in a form of a two-dimensional array ( returned from the "),Tt=l(g,"CODE",{});var dp=p(Tt);Zs=s(dp,"parse"),dp.forEach(n),gs=s(g," function ) and add them to the "),xt=l(g,"CODE",{});var fp=p(xt);eo=s(fp,"Deno.env"),fp.forEach(n),to=s(g," object with the "),St=l(g,"CODE",{});var hp=p(St);no=s(hp,"Deno.env.set()"),hp.forEach(n),ao=s(g," function."),g.forEach(n),Ln=d(e),_e=l(e,"P",{});var cl=p(_e);so=s(cl,"Now we have all the functions we need created, but they are not doing anything yet, they have to collaborate with each other to provide the functionality we are looking for. So let’s just create a function to do that let’s give a name of "),Lt=l(cl,"CODE",{});var vp=p(Lt);oo=s(vp,"dotenv"),vp.forEach(n),cl.forEach(n),Rn=d(e),we=l(e,"PRE",{class:!0});var nc=p(we);nc.forEach(n),Nn=d(e),h=l(e,"P",{});var k=p(h);lo=s(k,"This function take an optional parameter "),Rt=l(k,"CODE",{});var kp=p(Rt);po=s(kp,"envFilePath"),kp.forEach(n),co=s(k," which is the path to the "),Nt=l(k,"CODE",{});var Ep=p(Nt);ro=s(Ep,".env"),Ep.forEach(n),io=s(k," file ( if it’s provided the function will use it, if not the function will use ‘.env’ as a path value ), then using this path "),Kt=l(k,"CODE",{});var mp=p(Kt);uo=s(mp,"filePath"),mp.forEach(n),fo=s(k," to read the content of the "),Ht=l(k,"CODE",{});var _p=p(Ht);ho=s(_p,".env"),_p.forEach(n),vo=s(k," file synchronously using the "),Ft=l(k,"CODE",{});var wp=p(Ft);ko=s(wp,"readFileToStrSync(filePath)"),wp.forEach(n),Eo=s(k,", then parse the result using the "),jt=l(k,"CODE",{});var bp=p(jt);mo=s(bp,"parse(fileContent)"),bp.forEach(n),_o=s(k," function, then uses the parsed result in the "),Yt=l(k,"CODE",{});var yp=p(Yt);wo=s(yp,"setEnv(parsedEnv)"),yp.forEach(n),bo=s(k," function to set the environment variables in the "),It=l(k,"CODE",{});var Dp=p(It);yo=s(Dp,"Deno.env"),Dp.forEach(n),Do=s(k," object."),k.forEach(n),Kn=d(e),R=l(e,"H3",{id:!0});var oa=p(R);z=l(oa,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Cp=p(z);Ut=l(Cp,"SPAN",{class:!0}),p(Ut).forEach(n),Cp.forEach(n),Co=s(oa,"4. Finally "),Mt=l(oa,"CODE",{});var Op=p(Mt);Oo=s(Op,"export"),Op.forEach(n),oa.forEach(n),Hn=d(e),J=l(e,"P",{});var la=p(J);Po=s(la,"Now that we have the functionality create and ready, we need just to export the "),Bt=l(la,"CODE",{});var Pp=p(Bt);Ao=s(Pp,"dotenv"),Pp.forEach(n),To=s(la," function so the users can use it in their apps."),la.forEach(n),Fn=d(e),be=l(e,"PRE",{class:!0});var ac=p(be);ac.forEach(n),jn=d(e),$=l(e,"H1",{id:!0});var rl=p($);G=l(rl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ap=p(G);Vt=l(Ap,"SPAN",{class:!0}),p(Vt).forEach(n),Ap.forEach(n),xo=s(rl,"Let’s test the module"),rl.forEach(n),Yn=d(e),x=l(e,"P",{});var Me=p(x);So=s(Me,"First create a "),qt=l(Me,"CODE",{});var Tp=p(qt);Lo=s(Tp,".env"),Tp.forEach(n),Ro=s(Me," file and add some "),Wt=l(Me,"CODE",{});var xp=p(Wt);No=s(xp,"KEY=VALUE"),xp.forEach(n),Ko=s(Me," pairs, something like:"),Me.forEach(n),In=d(e),ye=l(e,"PRE",{class:!0});var sc=p(ye);sc.forEach(n),Un=d(e),E=l(e,"P",{});var L=p(E);Ho=s(L,"Then create a typescript file, call it "),Qt=l(L,"CODE",{});var Sp=p(Qt);Fo=s(Sp,"test.ts"),Sp.forEach(n),jo=s(L," or however you want, import the "),zt=l(L,"CODE",{});var Lp=p(zt);Yo=s(Lp,"dotenv"),Lp.forEach(n),Io=s(L," function from the "),Jt=l(L,"CODE",{});var Rp=p(Jt);Uo=s(Rp,"dotenv"),Rp.forEach(n),Mo=s(L," module we just created, and execute it, so that the environment variables will be available to use from the "),$t=l(L,"CODE",{});var Np=p($t);Bo=s(Np,"Deno.env"),Np.forEach(n),Vo=s(L," object"),L.forEach(n),Mn=d(e),De=l(e,"PRE",{class:!0});var oc=p(De);oc.forEach(n),Bn=d(e),S=l(e,"P",{});var Be=p(S);qo=s(Be,"now create a snapshot of the environment variables from the "),Gt=l(Be,"CODE",{});var Kp=p(Gt);Wo=s(Kp,"Deno.env"),Kp.forEach(n),Qo=s(Be," using the "),Xt=l(Be,"CODE",{});var Hp=p(Xt);zo=s(Hp,"Deno.env.toObject()"),Hp.forEach(n),Jo=s(Be," function and just use it:"),Be.forEach(n),Vn=d(e),Ce=l(e,"PRE",{class:!0});var lc=p(Ce);lc.forEach(n),qn=d(e),b=l(e,"P",{});var Ae=p(b);$o=s(Ae,"Run your "),Zt=l(Ae,"CODE",{});var Fp=p(Zt);Go=s(Fp,"test.ts"),Fp.forEach(n),Xo=s(Ae," using the flags "),gt=l(Ae,"CODE",{});var jp=p(gt);Zo=s(jp,"--allow-read"),jp.forEach(n),go=d(Ae),en=l(Ae,"CODE",{});var Yp=p(en);el=s(Yp,"--allow-env"),Yp.forEach(n),Ae.forEach(n),Wn=d(e),Oe=l(e,"PRE",{class:!0});var pc=p(Oe);pc.forEach(n),Qn=d(e),He=l(e,"P",{});var Ip=p(He);tl=s(Ip,"And that’s all, we are finished. Thank you."),Ip.forEach(n),zn=d(e),X=l(e,"P",{});var pa=p(X);nl=s(pa,"Here is "),Pe=l(pa,"A",{href:!0,rel:!0});var Up=p(Pe);al=s(Up,"the source code"),Up.forEach(n),sl=s(pa," (I re-factored it a little bit)."),pa.forEach(n),this.h()},h(){i(Ve,"class","icon icon-link"),i(N,"aria-hidden","true"),i(N,"tabindex","-1"),i(N,"href","#what-is-the-node-dotenv-module-"),i(m,"id","what-is-the-node-dotenv-module-"),i(ee,"href","https://nodejs.org/docs/latest/api/process.html#process_process_env"),i(ee,"rel","nofollow"),i(te,"href","http://12factor.net/config"),i(te,"rel","nofollow"),i(ne,"href","https://www.npmjs.com/package/dotenv"),i(ne,"rel","nofollow"),i(ae,"href","https://github.com/motdotla/dotenv"),i(ae,"rel","nofollow"),i(ze,"class","icon icon-link"),i(H,"aria-hidden","true"),i(H,"tabindex","-1"),i(H,"href","#what-is-a-env-file-"),i(K,"id","what-is-a-env-file-"),i(oe,"class","language-undefined"),i(Ge,"class","icon icon-link"),i(j,"aria-hidden","true"),i(j,"tabindex","-1"),i(j,"href","#the-main-steps"),i(F,"id","the-main-steps"),i(ce,"href","https://doc.deno.land/https/github.com/denoland/deno/releases/latest/download/lib.deno.d.ts#Deno.env"),i(ce,"rel","nofollow"),i(et,"class","icon icon-link"),i(Y,"aria-hidden","true"),i(Y,"tabindex","-1"),i(Y,"href","#1-read-the-content-from-the-env"),i(C,"id","1-read-the-content-from-the-env"),i(re,"class","language-typescript"),i(ue,"href","https://doc.deno.land/https/github.com/denoland/deno/releases/latest/download/lib.deno.d.ts#Deno.readFileSync"),i(ue,"rel","nofollow"),i(fe,"href","https://doc.deno.land/https/github.com/denoland/deno/releases/latest/download/lib.deno.d.ts#TextDecoder"),i(fe,"rel","nofollow"),i(rt,"class","icon icon-link"),i(V,"aria-hidden","true"),i(V,"tabindex","-1"),i(V,"href","#2-parse-the-environment-variables"),i(B,"id","2-parse-the-environment-variables"),i(he,"class","language-typescript"),i(ke,"href","https://doc.deno.land/https/github.com/denoland/deno/releases/latest/download/lib.deno.d.ts#Deno.env"),i(ke,"rel","nofollow"),i(Ct,"class","icon icon-link"),i(Q,"aria-hidden","true"),i(Q,"tabindex","-1"),i(Q,"href","#3-set-the-environment-variables-in-denoenv"),i(Ee,"href","https://doc.deno.land/https/github.com/denoland/deno/releases/latest/download/lib.deno.d.ts#Deno.env"),i(Ee,"rel","nofollow"),i(A,"id","3-set-the-environment-variables-in-denoenv"),i(me,"class","language-typescript"),i(we,"class","language-typescript"),i(Ut,"class","icon icon-link"),i(z,"aria-hidden","true"),i(z,"tabindex","-1"),i(z,"href","#4-finally-export"),i(R,"id","4-finally-export"),i(be,"class","language-typescript"),i(Vt,"class","icon icon-link"),i(G,"aria-hidden","true"),i(G,"tabindex","-1"),i(G,"href","#lets-test-the-module"),i($,"id","lets-test-the-module"),i(ye,"class","language-undefined"),i(De,"class","language-typescript"),i(Ce,"class","language-typescript"),i(Oe,"class","language-bash"),i(Pe,"href","https://github.com/AM-77/deno-dotenv"),i(Pe,"rel","nofollow")},m(e,c){r(e,m,c),t(m,N),t(N,Ve),t(m,ca),t(m,qe),t(qe,ra),t(m,ia),r(e,an,c),r(e,Te,c),t(Te,w),t(w,ua),t(w,We),t(We,da),t(w,fa),t(w,ee),t(ee,Qe),t(Qe,ha),t(w,va),t(w,te),t(te,ka),t(w,Ea),r(e,sn,c),r(e,y,c),t(y,ma),t(y,ne),t(ne,_a),t(y,wa),t(y,ae),t(ae,ba),t(y,ya),r(e,on,c),r(e,K,c),t(K,H),t(H,ze),t(K,Da),r(e,ln,c),r(e,xe,c),t(xe,se),t(se,Je),t(Je,Ca),t(se,Oa),t(se,$e),t($e,Pa),r(e,pn,c),r(e,Se,c),t(Se,Aa),r(e,cn,c),r(e,oe,c),oe.innerHTML=Bp,r(e,rn,c),r(e,Le,c),t(Le,Ta),r(e,un,c),r(e,F,c),t(F,j),t(j,Ge),t(F,xa),r(e,dn,c),r(e,Re,c),t(Re,Sa),r(e,fn,c),r(e,D,c),t(D,le),t(le,La),t(le,Xe),t(Xe,Ra),t(le,Na),t(D,Ka),t(D,Ze),t(Ze,Ha),t(D,Fa),t(D,pe),t(pe,ja),t(pe,ce),t(ce,ge),t(ge,Ya),t(pe,Ia),r(e,hn,c),r(e,C,c),t(C,Y),t(Y,et),t(C,Ua),t(C,tt),t(tt,Ma),t(C,Ba),r(e,vn,c),r(e,I,c),t(I,Va),t(I,nt),t(nt,qa),t(I,Wa),r(e,kn,c),r(e,re,c),re.innerHTML=Vp,r(e,En,c),r(e,U,c),t(U,at),t(at,Qa),t(U,za),t(U,st),t(st,Ja),r(e,mn,c),r(e,Ne,c),t(Ne,$a),r(e,_n,c),r(e,O,c),t(O,ie),t(ie,Ga),t(ie,ue),t(ue,ot),t(ot,Xa),t(ie,Za),t(O,ga),t(O,de),t(de,es),t(de,fe),t(fe,lt),t(lt,ts),t(de,ns),t(O,as),t(O,pt),t(pt,ss),r(e,wn,c),r(e,M,c),t(M,os),t(M,ct),t(ct,ls),t(M,ps),r(e,bn,c),r(e,B,c),t(B,V),t(V,rt),t(B,cs),r(e,yn,c),r(e,P,c),t(P,rs),t(P,it),t(it,is),t(P,us),t(P,ut),t(ut,ds),t(P,fs),r(e,Dn,c),r(e,he,c),he.innerHTML=qp,r(e,Cn,c),r(e,Ke,c),t(Ke,hs),r(e,On,c),r(e,q,c),t(q,ve),t(ve,vs),t(ve,dt),t(dt,ks),t(ve,Es),t(q,ms),t(q,f),t(f,_s),t(f,ft),t(ft,ws),t(f,bs),t(f,ht),t(ht,ys),t(f,Ds),t(f,vt),t(vt,Cs),t(f,Os),t(f,kt),t(kt,Ps),t(f,As),t(f,Et),t(Et,Ts),t(f,xs),t(f,mt),t(mt,Ss),t(f,Ls),t(f,_t),t(_t,Rs),t(f,Ns),t(f,wt),t(wt,Ks),t(f,Hs),t(f,bt),t(bt,Fs),t(f,js),t(f,yt),t(yt,Ys),t(f,Is),r(e,Pn,c),r(e,W,c),t(W,Us),t(W,ke),t(ke,Dt),t(Dt,Ms),t(W,Bs),r(e,An,c),r(e,A,c),t(A,Q),t(Q,Ct),t(A,Vs),t(A,Ee),t(Ee,Ot),t(Ot,qs),t(A,Ws),r(e,Tn,c),r(e,T,c),t(T,Qs),t(T,Pt),t(Pt,zs),t(T,Js),t(T,At),t(At,$s),t(T,Gs),r(e,xn,c),r(e,me,c),me.innerHTML=Wp,r(e,Sn,c),r(e,_,c),t(_,Xs),t(_,Tt),t(Tt,Zs),t(_,gs),t(_,xt),t(xt,eo),t(_,to),t(_,St),t(St,no),t(_,ao),r(e,Ln,c),r(e,_e,c),t(_e,so),t(_e,Lt),t(Lt,oo),r(e,Rn,c),r(e,we,c),we.innerHTML=Qp,r(e,Nn,c),r(e,h,c),t(h,lo),t(h,Rt),t(Rt,po),t(h,co),t(h,Nt),t(Nt,ro),t(h,io),t(h,Kt),t(Kt,uo),t(h,fo),t(h,Ht),t(Ht,ho),t(h,vo),t(h,Ft),t(Ft,ko),t(h,Eo),t(h,jt),t(jt,mo),t(h,_o),t(h,Yt),t(Yt,wo),t(h,bo),t(h,It),t(It,yo),t(h,Do),r(e,Kn,c),r(e,R,c),t(R,z),t(z,Ut),t(R,Co),t(R,Mt),t(Mt,Oo),r(e,Hn,c),r(e,J,c),t(J,Po),t(J,Bt),t(Bt,Ao),t(J,To),r(e,Fn,c),r(e,be,c),be.innerHTML=zp,r(e,jn,c),r(e,$,c),t($,G),t(G,Vt),t($,xo),r(e,Yn,c),r(e,x,c),t(x,So),t(x,qt),t(qt,Lo),t(x,Ro),t(x,Wt),t(Wt,No),t(x,Ko),r(e,In,c),r(e,ye,c),ye.innerHTML=Jp,r(e,Un,c),r(e,E,c),t(E,Ho),t(E,Qt),t(Qt,Fo),t(E,jo),t(E,zt),t(zt,Yo),t(E,Io),t(E,Jt),t(Jt,Uo),t(E,Mo),t(E,$t),t($t,Bo),t(E,Vo),r(e,Mn,c),r(e,De,c),De.innerHTML=$p,r(e,Bn,c),r(e,S,c),t(S,qo),t(S,Gt),t(Gt,Wo),t(S,Qo),t(S,Xt),t(Xt,zo),t(S,Jo),r(e,Vn,c),r(e,Ce,c),Ce.innerHTML=Gp,r(e,qn,c),r(e,b,c),t(b,$o),t(b,Zt),t(Zt,Go),t(b,Xo),t(b,gt),t(gt,Zo),t(b,go),t(b,en),t(en,el),r(e,Wn,c),r(e,Oe,c),Oe.innerHTML=Xp,r(e,Qn,c),r(e,He,c),t(He,tl),r(e,zn,c),r(e,X,c),t(X,nl),t(X,Pe),t(Pe,al),t(X,sl)},p:il,i:il,o:il,d(e){e&&n(m),e&&n(an),e&&n(Te),e&&n(sn),e&&n(y),e&&n(on),e&&n(K),e&&n(ln),e&&n(xe),e&&n(pn),e&&n(Se),e&&n(cn),e&&n(oe),e&&n(rn),e&&n(Le),e&&n(un),e&&n(F),e&&n(dn),e&&n(Re),e&&n(fn),e&&n(D),e&&n(hn),e&&n(C),e&&n(vn),e&&n(I),e&&n(kn),e&&n(re),e&&n(En),e&&n(U),e&&n(mn),e&&n(Ne),e&&n(_n),e&&n(O),e&&n(wn),e&&n(M),e&&n(bn),e&&n(B),e&&n(yn),e&&n(P),e&&n(Dn),e&&n(he),e&&n(Cn),e&&n(Ke),e&&n(On),e&&n(q),e&&n(Pn),e&&n(W),e&&n(An),e&&n(A),e&&n(Tn),e&&n(T),e&&n(xn),e&&n(me),e&&n(Sn),e&&n(_),e&&n(Ln),e&&n(_e),e&&n(Rn),e&&n(we),e&&n(Nn),e&&n(h),e&&n(Kn),e&&n(R),e&&n(Hn),e&&n(J),e&&n(Fn),e&&n(be),e&&n(jn),e&&n($),e&&n(Yn),e&&n(x),e&&n(In),e&&n(ye),e&&n(Un),e&&n(E),e&&n(Mn),e&&n(De),e&&n(Bn),e&&n(S),e&&n(Vn),e&&n(Ce),e&&n(qn),e&&n(b),e&&n(Wn),e&&n(Oe),e&&n(Qn),e&&n(He),e&&n(zn),e&&n(X)}}}const fc={title:"Build Your Own deno-dotenv",date:"2020-06-24",description:"Let's build a deno-dotenv module.",tags:"Deno,TypeScript,dotenv"};class hc extends cc{constructor(m){super(),rc(this,m,null,uc,ic,{})}}export{hc as default,fc as metadata};
